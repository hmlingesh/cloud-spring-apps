package org.ling.enterprise;

import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.List;



public class SystemCommandExecutor
{
  private List<String> commandInformation;
  private String adminPassword;
  private StringBuilder stdout;
  private StringBuilder stderr;
  /**
   * Use this constructor if you don't need to run the command with sudo and a password.
   * 
   * @param commandInformation The command you want to run.
   */
  public SystemCommandExecutor(final List<String> commandInformation)
  {
    // TODO is this the right exception to throw?
    if (commandInformation==null) throw new IllegalStateException("The commandInformation is required.");
    this.commandInformation = commandInformation;
    this.adminPassword = null;
  }

  /**
   * Use this constructor when you want to run the given command with sudo and a supplied
   * password.
   * 
   * @param commandInformation The command you want to run.
   * @param adminPassword The admin or root password for the current system.
   */
  public SystemCommandExecutor(final List<String> commandInformation, final String adminPassword)
  {
    // TODO is this the right exception to throw?
    if (commandInformation==null || adminPassword==null) throw new IllegalStateException("The commandInformation and password are both required.");
    this.commandInformation = commandInformation;
    this.adminPassword = adminPassword;
  }
  
  @SuppressWarnings("finally")
public int execCommand()
  throws IOException, InterruptedException
  {
    int exitValue = -99;

    try
    {
      ProcessBuilder pb = new ProcessBuilder(commandInformation);
      Process process = pb.start();

      // we're going to write the password to the sudo command, so we need an output writer
      OutputStream stdOutput = process.getOutputStream();
      
      // i'm doing these on a separate line here in case i need to set them to null
      // to get the threads to stop
      InputStream inputStream = process.getInputStream();
      InputStream errorStream = process.getErrorStream();

      // TODO the inputStreamHandler may only be needed for sudo commands
      ThreadedStreamHandler inputStreamHandler = new ThreadedStreamHandler(inputStream, stdOutput, adminPassword);
      ThreadedStreamHandler errorStreamHandler = new ThreadedStreamHandler(errorStream);

      // TODO the inputStreamHandler has a nasty side-effect of hanging if the given password is wrong; fix it
      inputStreamHandler.start();
      errorStreamHandler.start();

      // TODO a better way to do this?
    //  System.out.println("waiting for process ...");
      exitValue = process.waitFor();
 
      // process is done, stop the threads
      //System.out.println("interrupting threads");
      inputStreamHandler.interrupt();
      errorStreamHandler.interrupt();

      // i need to learn about this, but code doesn't work without it
      inputStreamHandler.join();
      errorStreamHandler.join();

      // get the results from the input and error gobblers
      //System.out.println("--- Start InputGobbler Output");
      //System.out.println(inputStreamHandler.getOutputBuffer());
      //System.out.println("--- Stop InputGobbler Output");
      
      /*System.out.println("");
      System.out.println("--- Start ErrorGobbler Output");
      System.out.println(errorStreamHandler.getOutputBuffer());
      System.out.println("--- Stop ErrorGobbler Output");*/
      stdout = inputStreamHandler.getOutputBuffer();
      stderr = errorStreamHandler.getOutputBuffer();
    }
    catch (IOException e)
    {
      // TODO deal with this here, or just throw it?
      throw e;
    }
    catch (InterruptedException e)
    {
      // generated by process.waitFor() call
      // TODO deal with this here, or just throw it?
      throw e;
    }
    finally
    {
      return exitValue;
    }
  }

public StringBuilder getStdout() {
	return stdout;
}

public void setStdout(StringBuilder stdout) {
	this.stdout = stdout;
}

public StringBuilder getStderr() {
	return stderr;
}

public void setStderr(StringBuilder stderr) {
	this.stderr = stderr;
}
  
 
}

